generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password_hash String
  role          String    @default("pending")
  status        String    @default("pending")
  first_name    String
  last_name     String
  phone_number  String?
  profile_image_url String?
  last_login    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  permissions   UserPermission[]
  roles         UserRole[]
  schoolUsers   SchoolUser[]
  student       Student?
  teacher       Teacher?
  documents     Document[]
  notifications Notification[] @relation("UserNotifications")
  createdNotifications Notification[] @relation("NotificationCreator")
  reports       Report[]      @relation("UserReports")
}

model Role {
  id              String    @id @default(uuid())
  name            String    @unique
  description     String?
  permissions     Json?
  is_system_role  Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  userRoles       UserRole[]
  notifications   Notification[] @relation("RoleNotifications")
}

model UserRole {
  id            String    @id @default(uuid())
  user_id       String
  role_id       String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role          Role      @relation(fields: [role_id], references: [id])
}

model UserPermission {
  id              String    @id @default(uuid())
  user_id         String
  permission_key  String
  resource_type   String?
  resource_id     String?
  granted_by      String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  @@unique([user_id, permission_key, resource_type, resource_id])
}

model School {
  id              String    @id @default(uuid())
  name            String
  address         String
  phone_number    String?
  email           String?   @unique
  logo_url        String?
  status          String    @default("active")
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  schoolUsers     SchoolUser[]
  students        Student[]
  teachers        Teacher[]
  documents       Document[]
  notifications   Notification[] @relation("SchoolNotifications")
}

model SchoolUser {
  id              String    @id @default(uuid())
  user_id         String
  school_id       String
  role            String    @default("member")
  status          String    @default("active")
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  school          School    @relation(fields: [school_id], references: [id], onDelete: Cascade)
  @@unique([user_id, school_id])
}

model Student {
  id              String    @id @default(uuid())
  user_id         String    @unique
  school_id       String
  student_id      String    @unique
  grade_level     String?
  enrollment_date DateTime?
  status          String    @default("active")
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  school          School    @relation(fields: [school_id], references: [id], onDelete: Cascade)
}

model Teacher {
  id              String    @id @default(uuid())
  user_id         String    @unique
  school_id       String
  teacher_id      String    @unique
  department      String?
  hire_date       DateTime?
  status          String    @default("active")
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  school          School    @relation(fields: [school_id], references: [id], onDelete: Cascade)
}

model Document {
  id              String    @id @default(uuid())
  school_id       String
  user_id         String
  title           String
  description     String?
  file_url        String
  file_type       String
  file_size       Int
  status          String    @default("active")
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  school          School    @relation(fields: [school_id], references: [id], onDelete: Cascade)
}

model Notification {
  id              String    @id @default(uuid())
  user_id         String?
  school_id       String?
  role_id         String?
  title           String
  message         String
  status          String    @default("unread") // unread, read
  type            String    @default("info")   // info, warning, error
  resource_type   String?                      // e.g., Document, School
  resource_id     String?                      // e.g., document ID
  created_by      String                       // User who created the notification
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  user            User?     @relation("UserNotifications", fields: [user_id], references: [id], onDelete: Cascade)
  school          School?   @relation("SchoolNotifications", fields: [school_id], references: [id], onDelete: Cascade)
  role            Role?     @relation("RoleNotifications", fields: [role_id], references: [id], onDelete: SetNull)
  creator         User      @relation("NotificationCreator", fields: [created_by], references: [id], onDelete: Cascade)
}

model Report {
  id              String    @id @default(uuid())
  user_id         String
  type            String    // document_summary, user_activity, school_stats
  filters         Json?     // e.g., { school_id: "...", start_date: "...", end_date: "..." }
  status          String    @default("pending") // pending, completed, failed
  data            Json?     // Report results
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  user            User      @relation("UserReports", fields: [user_id], references: [id], onDelete: Cascade)
}